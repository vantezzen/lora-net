{"version":3,"sources":["modules/TerminalEntryStore.ts","modules/MockConnection.ts","modules/WebSerialConnection.ts","sections/ConnectionInfo.tsx","components/NotConnected.tsx","sections/Network.tsx","sections/Terminal.tsx","App.tsx","index.tsx"],"names":["TerminalEntryStore","entries","updateListeners","this","add","isSender","message","entry","push","Date","toLocaleTimeString","forEach","listener","callback","filter","MockConnection","terminal","isConnected","connectionStart","dataListeners","log","onData","str","Promise","resolve","setTimeout","name","icon","data","a","WebSerialConnection","port","writer","reader","String","fromCharCode","apply","Array","from","console","read","then","value","done","processData","startReader","navigator","serial","requestPort","catch","open","baudRate","writable","getWriter","readable","getReader","cancel","abort","close","undefined","getInfo","write","TextEncoder","encode","ConnectionInfo","props","state","isDisconnecting","updateLoop","timeAgo","TimeAgo","addDefaultLocale","de","setInterval","forceUpdate","clearInterval","Connection","connect","terminalStore","setConnection","success","forceRender","connection","className","color","dot","size","connectionInfo","getConnectionInfo","Icon","Icons","format","getConnectionType","type","onClick","setState","disconnect","setupConnection","title","renderContent","React","Component","NotConnected","Network","getIsConnected","Terminal","outputElement","inputVal","createRef","doUpdate","bind","current","el","scrollTop","scrollHeight","onUpdate","removeUpdateListener","scrollOutput","ref","getAll","map","i","style","borderColor","placeholder","onChange","evt","target","onKeyDown","code","shiftKey","length","preventDefault","send","terminalEntryStore","App","useState","setForceRender","backgroundColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f78f610.chunk.js","sourcesContent":["import { TerminalEntry, TerminalOutput } from \"./ITerminal\";\n\n/**\n * Terminal entry store.\n * Stores all terminal entries across all parts of the app.\n */\nexport default class TerminalEntryStore {\n  private entries: TerminalOutput = [];\n  private updateListeners: Function[] = [];\n\n  constructor() {\n    this.add({\n      isSender: true,\n      message: \"Wilkommen im Terminal!\",\n    });\n  }\n\n  /**\n   * Add a new entry to the terminal\n   * \n   * @param entry Entry to add\n   */\n  add(entry: TerminalEntry) {\n    this.entries.push({\n      isSender: entry.isSender,\n      message: `[${(new Date()).toLocaleTimeString()}] ${entry.message}`,\n    });\n    this.updateListeners.forEach(listener => listener());\n  }\n\n  /**\n   * Get all saved entries.\n   * The first entry will be the oldest, the last entry will be the newest.\n   * \n   * @returns Entry array\n   */\n  getAll() {\n    return this.entries;\n  }\n\n  /**\n   * Add a new listener to call when entries get updated\n   * \n   * @param callback Callback\n   */\n  onUpdate(callback: Function) {\n    this.updateListeners.push(callback);\n  }\n\n  /**\n   * Remove an update listener\n   * \n   * @param callback Callback to remove\n   */\n  removeUpdateListener(callback: Function) {\n    this.updateListeners = this.updateListeners.filter(listener => listener !== callback);\n  }\n}","import IModuleConnection, { ConnectionInfo } from \"./IModuleConnection\";\nimport TerminalEntryStore from \"./TerminalEntryStore\";\n\n/**\n * Mock connection for testing.\n */\nexport default class MockConnection implements IModuleConnection {\n  private isConnected = false;\n  private connectionStart = new Date();\n  private terminal: TerminalEntryStore;\n\n  private dataListeners: Function[] = [];\n\n  constructor(terminal: TerminalEntryStore) {\n    this.terminal = terminal;\n    this.log('Mock Interface wurde erstellt');\n    this.onData((str) => {\n      this.terminal.add({\n        isSender: false,\n        message: `> ${str}`,\n      });\n    })\n  }\n  private log(message: string): void {\n    this.terminal.add({\n      isSender: false,\n      message: `| Mock: ${message}`,\n    });\n  }\n  \n  getConnectionType(): string {\n    return \"Mock\";\n  }\n\n  connect(): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.log('Verbinde in 1,5s');\n      setTimeout(() => {\n        this.log('Verbindung hergestellt');\n        this.isConnected = true;\n        this.connectionStart = new Date();\n    \n        resolve(true);\n      }, 1500);\n    })\n  }\n  \n  disconnect(): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.log('Trenne Verbindung in 1,5s');\n      setTimeout(() => {\n        this.log('Verbindung getrennt');\n        this.isConnected = false;\n        this.connectionStart = new Date();\n    \n        resolve(true);\n      }, 1500);\n    })\n  }\n\n  getConnectionInfo(): false | ConnectionInfo {\n    if (!this.isConnected) return false;\n    return {\n      name: 'Mock Device',\n      icon: 'Code',\n      connectionStart: this.connectionStart\n    }\n  }\n  \n  getIsConnected(): boolean {\n    return this.isConnected;\n  }\n\n  async send(data: string): Promise<void> {\n    this.terminal.add({\n      isSender: true,\n      message: data\n    });\n    this.dataListeners.forEach(listener => listener(\"AT+OK\"));\n  }\n\n  onData(callback: (data: string) => any): void {\n    this.dataListeners.push(callback);\n  }\n  \n}","import IModuleConnection, { ConnectionInfo } from \"./IModuleConnection\";\nimport TerminalEntryStore from \"./TerminalEntryStore\";\n\n/**\n * Connector for connecting to devices using the WebSerial API\n */\nexport default class WebSerialConnection implements IModuleConnection {\n  private connectionStart = new Date();\n  private terminal: TerminalEntryStore;\n  private dataListeners: ((data: string) => any)[] = [];\n\n  // WebSerial specific\n  private port?: SerialPort;\n  private writer?: WritableStreamDefaultWriter<Uint8Array>;\n  private reader?: ReadableStreamDefaultReader<Uint8Array>;\n\n  constructor(terminal: TerminalEntryStore) {\n    this.terminal = terminal;\n    this.log('Neue WebSerial Verbindung erstellt');\n  }\n  \n  getConnectionType(): string {\n    return \"WebSerial\";\n  }\n\n  private log(message: string): void {\n    this.terminal.add({\n      isSender: false,\n      message: `| WebSerial: ${message}`,\n    });\n  }\n\n  /**\n   * Process data received from the device and notify all registered callbacks\n   * \n   * @param data Data received from the device\n   */\n  private processData(data: Uint8Array): void {\n    const str = String.fromCharCode.apply(null, Array.from(data));\n\n    this.terminal.add({\n      isSender: false,\n      message: `> ${str}`,\n    });\n    this.dataListeners.forEach(listener => listener(str));\n  }\n  /**\n   * Start reading data from the device\n   * This function will automatically loop until the device is disconnected\n   */\n  private startReader(): void {\n    console.log(\"WebSerial waiting for next data\");\n    this.reader?.read().then(({ value, done }) => {\n      console.log(\"Reader signal read\", { value, done });\n      if (done) {\n        this.log('WebSerial Reader beendet - done signal empfangen');\n        return;\n      }\n      if (value) {\n        this.processData(value);\n      }\n\n      // Read next data\n      this.startReader();\n    });\n  }\n\n  async connect(): Promise<boolean> {\n    this.log('Stelle WebSerial Verbindung her...');\n\n    // Request Device to connect to\n    this.port = await navigator.serial.requestPort().catch(() => {\n      this.log('WebSerial Verbindung fehlgeschlagen');\n      return undefined;\n    });\n    if (!this.port) {\n      return false;\n    }\n\n    // Open connection\n    await this.port.open({ baudRate: 9600 });\n\n    // Write Support\n    if (!this.port.writable) {\n      this.log('WebSerial Gerät unterstützt kein Write!');\n    } else {\n      this.writer = this.port.writable.getWriter();\n    }\n    // Read Support\n    if (!this.port.readable) {\n      this.log('WebSerial Gerät unterstützt kein Read!');\n    } else {\n      this.reader = this.port.readable.getReader();\n      this.startReader();\n    }\n\n    this.log('WebSerial Gerät eingerichtet');\n    this.connectionStart = new Date();\n\n    return true;\n  }\n  \n  async disconnect(): Promise<boolean> {\n    this.log('Trenne Verbindung...');\n\n    if (this.port) {\n      // Flush buffers before disconnect, otherwise the WebSerial API might throw errors\n      await this.reader?.cancel();\n      await this.writer?.abort();\n      await this.port.close();\n    }\n    this.port = undefined;\n\n    this.log('Verbindung getrennt');\n    return true;\n  }\n\n  getConnectionInfo(): false | ConnectionInfo {\n    return {\n      name: this.port ? `${(this.port.getInfo()['usbVendorId'] ? 'USB' : 'Bluetooth')} Gerät` : 'Unbekannt',\n      icon: 'Radio',\n      connectionStart: this.connectionStart\n    }\n  }\n  \n  getIsConnected(): boolean {\n    return !!this.port;\n  }\n\n  async send(data: string): Promise<void> {\n    await this.writer?.write(new TextEncoder().encode(`${data}\\n`));\n    this.terminal.add({\n      isSender: true,\n      message: data\n    });\n  }\n\n  onData(callback: (data: string) => any): void {\n    this.dataListeners.push(callback);\n  }\n  \n}","import React from \"react\";\nimport * as Icons from 'react-feather'\nimport { Button, Card, Badge } from '@supabase/ui'\nimport TimeAgo from 'javascript-time-ago'\nimport de from 'javascript-time-ago/locale/de.json'\nimport IModuleConnection from \"../modules/IModuleConnection\";\nimport MockConnection from \"../modules/MockConnection\";\nimport TerminalEntryStore from \"../modules/TerminalEntryStore\";\nimport WebSerialConnection from \"../modules/WebSerialConnection\";\n\ntype ConnectionInfoProps = {\n  connection: IModuleConnection | null,\n  setConnection: (connection: IModuleConnection | null) => any,\n  forceRender: () => any,\n  terminalStore: TerminalEntryStore\n};\n\nexport default class ConnectionInfo extends React.Component<ConnectionInfoProps> {\n\n  state = {\n    isDisconnecting: false,\n  };\n\n  updateLoop: NodeJS.Timeout | false = false;\n  timeAgo: TimeAgo;\n\n  constructor(props: ConnectionInfoProps) {\n    super(props);\n\n    TimeAgo.addDefaultLocale(de)\n    this.timeAgo = new TimeAgo('de-DE')\n  }\n\n  // Component is forcing an update every second to keep the \"Time since connection\" clock up-to-date\n  componentDidMount() {\n    this.updateLoop = setInterval(() => {\n      this.forceUpdate();\n    }, 1000);\n  }\n  componentWillUnmount() {\n    if (this.updateLoop) {\n      clearInterval(this.updateLoop);\n    }\n  }\n\n  /**\n   * Setup a connection using any Module Connection Class\n   * \n   * @param Connection IModuleConnection Class to use\n   */\n  setupConnection(Connection: new (terminalStore: TerminalEntryStore) => IModuleConnection) {\n    const connect = new Connection(this.props.terminalStore);\n    this.props.setConnection(connect);\n\n    connect.connect().then((success) => {\n      if (!success) {\n        this.props.setConnection(null);\n      }\n      this.props.forceRender();\n    });\n  }\n\n  renderContent() {\n    const {connection} = this.props;\n    \n    if (this.state.isDisconnecting) {\n      return (\n        <div>\n          <div className=\"mb-5\">\n            <Badge color=\"indigo\" dot size=\"large\">\n              Trenne Verbindung...\n            </Badge>\n          </div>\n        </div>\n      )\n    }\n\n    if (connection) {\n      const connectionInfo = connection.getConnectionInfo();\n      if (connectionInfo === false) {\n        // Connection Class has been added but no connection has been established yet\n        // E.g clicked on \"Connect\" button but didn't choose a device yet\n        return (\n          <div>\n            <div className=\"mb-5\">\n              <Badge color=\"indigo\" dot size=\"large\">\n                Verbinde...\n              </Badge>\n            </div>\n          </div>\n        )\n      }\n\n      const Icon = Icons[connectionInfo.icon];\n\n      // Connection established and active\n      return (\n        <div>\n          <div className=\"mb-5\">\n            <Badge color=\"green\" dot size=\"large\">\n              Verbunden mit Gerät\n            </Badge>\n          </div>\n\n          <div className=\"flex gap-5\">\n            <div>\n              <Icon\n                size={40}\n              />\n            </div>\n            <div className=\"w-full\">\n              <p>\n                <span className=\"text-gray-500 mr-3\">\n                  Name:\n                </span>\n                <span className=\"float-right font-bold\">\n                  {connectionInfo.name}\n                </span>\n              </p>\n              <p>\n                <span className=\"text-gray-500 mr-3\">\n                  Verbindungszeit:\n                </span>\n                <span className=\"float-right font-bold\">\n                  seit {this.timeAgo.format(connectionInfo.connectionStart, 'twitter-now')}\n                </span>\n              </p>\n              <p>\n                <span className=\"text-gray-500 mr-3\">\n                  Verbindungstyp:\n                </span>\n                <span className=\"float-right font-bold\">\n                  {connection.getConnectionType()}\n                </span>\n              </p>\n            </div>\n          </div>\n\n          <Button\n            type=\"default\"\n            className=\"mt-5\"\n            onClick={() => {\n              this.setState({ isDisconnecting: true });\n              connection.disconnect().then(() => {\n                this.setState({ isDisconnecting: false });\n                this.props.setConnection(null);\n              });\n            }}\n          >\n            Verbindung trennen\n          </Button>\n\n        </div>\n      )\n    }\n\n    // No active connection\n    return (\n      <div>\n        <div className=\"mb-5\">\n          <Badge color=\"pink\" dot size=\"large\">\n            Nicht verbunden\n          </Badge>\n        </div>\n\n        <Button\n          onClick={() => {\n            this.setupConnection(WebSerialConnection);\n          }}\n          className=\"m-3\"\n        >\n          Mit WebSerial Gerät verbinden\n        </Button>\n\n        <Button\n          className=\"m-3\"\n          onClick={() => {\n            this.setupConnection(MockConnection);\n          }}\n        >\n          Mit Mock verbinden\n        </Button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Card \n        className=\"w-full h-full\"\n        // @ts-ignore\n        title={(<div className=\"flex items-center gap-3\"> <Icons.Link size={15} /> Verbindung </div>)}\n      >\n        {this.renderContent()}\n      </Card>\n    );\n  }\n\n}","import React from \"react\"\nimport { Link } from \"react-feather\";\n\nconst NotConnected = () => (\n  <div className=\"w-full h-full flex items-center justify-center\">\n    <div className=\"flex items-center flex-col text-gray-400\">\n      <Link size={30} />\n      <h3 className=\"text-lg mt-3\">\n        Nicht verbunden\n      </h3>\n    </div>\n  </div>\n)\nexport default NotConnected;","import React from \"react\";\nimport { Card } from '@supabase/ui'\nimport * as Icons from 'react-feather';\nimport IModuleConnection from \"../modules/IModuleConnection\";\nimport NotConnected from \"../components/NotConnected\";\n\nexport default class Network extends React.Component<{\n  connection: IModuleConnection | null,\n}> {\n  render() {\n    const {connection} = this.props;\n\n    return (\n      <Card \n        className=\"w-full h-full\"\n        // @ts-ignore\n        title={(<div className=\"flex items-center gap-3\"> <Icons.Share2 size={15} /> Netzwerk </div>)}\n      >\n        {/* TODO: Implement Network Monitor once Network functionality is implemented */}\n        {(connection && connection.getIsConnected()) ? (\n          <div className=\"w-full h-full flex items-center justify-center\">\n            <div className=\"flex items-center flex-col text-gray-400\">\n              <Icons.Hexagon size={30} />\n              <h3 className=\"text-lg mt-3\">\n                Noch nicht eingerichtet\n              </h3>\n            </div>\n          </div>\n        ) : (\n          <NotConnected />\n        )}\n\n      </Card>\n    );\n  }\n\n}","import React from \"react\";\nimport { Card } from '@supabase/ui'\nimport * as Icons from 'react-feather';\nimport IModuleConnection from \"../modules/IModuleConnection\";\nimport TerminalEntryStore from \"../modules/TerminalEntryStore\";\n\ntype TerminalProps = {\n  connection: IModuleConnection | null,\n  terminalStore: TerminalEntryStore\n}\ntype TerminalState = {\n  inputVal: string\n}\n\nexport default class Terminal extends React.Component<TerminalProps, TerminalState> {\n  outputElement?: React.RefObject<HTMLDivElement>;\n\n  state: TerminalState = {\n    inputVal: ''\n  };\n\n  constructor(props: TerminalProps) {\n    super(props);\n\n    this.outputElement = React.createRef();\n    this.doUpdate = this.doUpdate.bind(this);\n  }\n\n  /**\n   * Scroll the output element to the bottom to show the latest messages\n   */\n  scrollOutput() {\n    setTimeout(() => {\n      if (this.outputElement && this.outputElement.current) {\n        const el = this.outputElement.current;\n        el.scrollTop = el.scrollHeight;\n      }\n    }, 0);\n  }\n\n  /**\n   * Wrapped update method for use in the terminal store.\n   * This is needed to bind `this` to the function as it will fail otherwise.\n   */\n  doUpdate() {\n    this.forceUpdate();\n  }\n\n  componentDidMount() {\n    this.props.terminalStore.onUpdate(this.doUpdate);\n  }\n  componentWillUnmount() {\n    this.props.terminalStore.removeUpdateListener(this.doUpdate);\n  }\n\n  render() {\n    this.scrollOutput();\n\n    return (\n      <Card \n        className=\"w-full h-full\"\n        // @ts-ignore\n        title={(<div className=\"flex items-center gap-3\"> <Icons.Terminal size={15} /> Terminal </div>)}\n      >\n        <div className=\"flex flex-col overflow-scroll h-full\">\n            \n          {/* Output */}\n          <div className=\"overflow-auto font-mono text-xs flex-grow pb-1\" ref={this.outputElement}>\n            {\n              this.props.terminalStore.getAll().map((entry, i) => (\n                <span className={entry.isSender ? '' : 'text-gray-400'} key={i}>\n                  {entry.message}<br />\n                </span>\n              ))\n            }\n          </div>\n\n          {/* Input */}\n          <div className=\"border-t flex-shrink-0 py-1\" style={{ borderColor: '#2a2a2a' }}>\n            <input \n              type=\"text\"\n              className=\"\n                bg-transparent\n                w-full h-full\n                outline-none\n                border border-transparent\n                rounded\n                focus:border-gray-600\n                p-2\n                font-mono\n                text-xs\n              \"\n              placeholder=\"Kommandos hier eingeben...\"\n              value={this.state.inputVal}\n              \n              onChange={(evt) => {this.setState({ inputVal: evt.target.value })}}\n\n              // Pressing \"Enter\" without Shift should send the message\n              onKeyDown={(evt) => {\n                if (evt.code === \"Enter\" && !evt.shiftKey && this.state.inputVal.length > 0) {\n                  evt.preventDefault();\n                  this.props.connection?.send(this.state.inputVal);\n                  this.setState({\n                    inputVal: ''\n                  });\n                }\n              }}\n            />\n          </div>\n\n        </div>\n      </Card>\n    );\n  }\n\n}","import React, { useState } from 'react';\nimport './App.css';\nimport IModuleConnection from './modules/IModuleConnection';\nimport TerminalEntryStore from './modules/TerminalEntryStore';\nimport ConnectionInfo from './sections/ConnectionInfo';\nimport Network from './sections/Network';\nimport Terminal from './sections/Terminal';\n\nconst terminalEntryStore = new TerminalEntryStore();\n\nfunction App() {\n  // Global classes\n  const [ connection, setConnection ] = useState<IModuleConnection | null>(null);\n  const [ terminalStore ] = useState(terminalEntryStore);\n\n  // Allow forcing the complete app to rerender to reflect large state changes (e.g. connection change)\n  const [ , setForceRender ] = useState({});\n  const forceRender = () => {\n    setForceRender({});\n  }\n\n  return (\n    <div className=\"min-w-screen h-screen grid grid-rows-2 dark text-gray-100\" style={{ backgroundColor: '#2a2a2a' }}>\n      \n      {/* Top Row */}\n      <div className=\"p-5 pb-0 grid grid-cols-2 lg:grid-cols-3 gap-5\">\n        <ConnectionInfo\n          connection={connection}\n          setConnection={setConnection}\n          forceRender={forceRender}\n          terminalStore={terminalStore}\n        />\n        <div className=\"lg:col-span-2\">\n          <Network\n            connection={connection}\n          />\n        </div>\n      </div>\n\n      {/* Bottom Row */}\n      <div className=\"p-5\">\n        <Terminal \n          connection={connection}\n          terminalStore={terminalStore}\n        />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}